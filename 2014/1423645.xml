<?xml version="1.0" encoding="UTF-8"?>

<rootTag>
  <Award>
    <AwardTitle>SHF: Small: A Dynamic Analysis and Test Generation Framework for JavaScript and Web Applications</AwardTitle>
    <AwardEffectiveDate>08/01/2014</AwardEffectiveDate>
    <AwardExpirationDate>07/31/2017</AwardExpirationDate>
    <AwardAmount>500000</AwardAmount>
    <AwardInstrument>
      <Value>Standard Grant</Value>
    </AwardInstrument>
    <Organization>
      <Code>05010000</Code>
      <Directorate>
        <LongName>Directorate for Computer &amp; Information Science &amp; Engineering</LongName>
      </Directorate>
      <Division>
        <LongName>Division of Computer and Communication Foundations</LongName>
      </Division>
    </Organization>
    <ProgramOfficer>
      <SignBlockName>Sol J. Greenspan</SignBlockName>
    </ProgramOfficer>
    <AbstractNarration>JavaScript is the most popular programming language for client-side&lt;br/&gt;web programming. Advances in browser technologies and JavaScript&lt;br/&gt;engines in the recent years have fueled the use of JavaScript in Rich&lt;br/&gt;Internet Applications, and several mobile platforms including Android,&lt;br/&gt;IOS, Tizen OS, Windows 8, Blackberry, and Firefox OS, support&lt;br/&gt;applications written in JavaScript/HTML5. With a renewed interest in&lt;br/&gt;JavaScript, many complex applications such as Google docs, Gmail, and&lt;br/&gt;a variety of games are being developed using&lt;br/&gt;HTML5/JavaScript. However, unlike C/C++, Java, and C#, JavaScript is&lt;br/&gt;significantly shorthanded in the tools landscape. The dynamic and&lt;br/&gt;reflective nature of JavaScript makes it hard to analyze it&lt;br/&gt;statically.&lt;br/&gt;&lt;br/&gt;This project investigates a dynamic analysis framework and several&lt;br/&gt;dynamic analysis techniques for JavaScript. The analysis framework&lt;br/&gt;provides a few useful abstractions and an API that significantly&lt;br/&gt;simplifies implementation of dynamic analyses for JavaScript. The&lt;br/&gt;framework works through source code instrumentation and allows&lt;br/&gt;implementation of various heavy-weight dynamic analyses and test&lt;br/&gt;generation techniques. The projects investigates and implements&lt;br/&gt;several dynamic analyses including concolic testing, pure symbolic&lt;br/&gt;execution, a detector of likely type inconsistencies, and a runtime&lt;br/&gt;memory profiler. The techniques developed in this project are&lt;br/&gt;suitable for analyzing and testing that web applications written in&lt;br/&gt;JavaScript/HTML5 are free of common correctness and performance&lt;br/&gt;bugs. The techniques will benefit directly web applications&lt;br/&gt;programmers, and indirectly the numerous users of mobile and web&lt;br/&gt;applications.</AbstractNarration>
    <MinAmdLetterDate>07/17/2014</MinAmdLetterDate>
    <MaxAmdLetterDate>07/17/2014</MaxAmdLetterDate>
    <ARRAAmount/>
    <AwardID>1423645</AwardID>
    <Investigator>
      <FirstName>Koushik</FirstName>
      <LastName>Sen</LastName>
      <EmailAddress>ksen@eecs.berkeley.edu</EmailAddress>
      <StartDate>07/17/2014</StartDate>
      <EndDate/>
      <RoleCode>Principal Investigator</RoleCode>
    </Investigator>
    <Institution>
      <Name>University of California-Berkeley</Name>
      <CityName>BERKELEY</CityName>
      <ZipCode>947045940</ZipCode>
      <PhoneNumber>5106428109</PhoneNumber>
      <StreetAddress>Sponsored Projects Office</StreetAddress>
      <CountryName>United States</CountryName>
      <StateName>California</StateName>
      <StateCode>CA</StateCode>
    </Institution>
    <ProgramElement>
      <Code>7798</Code>
      <Text>SOFTWARE &amp; HARDWARE FOUNDATION</Text>
    </ProgramElement>
    <ProgramReference>
      <Code>7923</Code>
      <Text>SMALL PROJECT</Text>
    </ProgramReference>
    <ProgramReference>
      <Code>8206</Code>
      <Text>Formal Methods and Verification</Text>
    </ProgramReference>
  </Award>
</rootTag>
