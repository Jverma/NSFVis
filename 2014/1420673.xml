<?xml version="1.0" encoding="UTF-8"?>

<rootTag>
  <Award>
    <AwardTitle>SHF: Small: Collaborative Research: Concurrent Programming with Composable Transactional Objects</AwardTitle>
    <AwardEffectiveDate>07/01/2014</AwardEffectiveDate>
    <AwardExpirationDate>06/30/2017</AwardExpirationDate>
    <AwardAmount>249997</AwardAmount>
    <AwardInstrument>
      <Value>Standard Grant</Value>
    </AwardInstrument>
    <Organization>
      <Code>05010000</Code>
      <Directorate>
        <LongName>Directorate for Computer &amp; Information Science &amp; Engineering</LongName>
      </Directorate>
      <Division>
        <LongName>Division of Computer and Communication Foundations</LongName>
      </Division>
    </Organization>
    <ProgramOfficer>
      <SignBlockName>Anindya Banerjee</SignBlockName>
    </ProgramOfficer>
    <AbstractNarration>SHF: Small: Collaborative Research: Concurrent Programming with Composable Transactional Objects&lt;br/&gt;&lt;br/&gt;With multicore architectures becoming increasingly prevalent, the problem of constructing scalable and efficient concurrent software has attracted increasing attention. There has been growing interest in programming models that allow programmers to demarcate regions of thread code---so-called transactions---that should appear to occur atomically, when viewed from the perspective of other threads.&lt;br/&gt;&lt;br/&gt;The premise of this project is that current, monolithic software transactional memory (STM) designs are inherently too inefficient and permit too little parallelism. Instead we propose a very different approach: a library of customized concurrent data structures that can be composed, through a very light-weight run-time, to form transactions. Each data structure is optimized to exploit the semantics of its type. The intellectual merits are the development of new type-specific synchronization and recovery algorithms, along with formal tools to reason about their correctness. These ideas will be embodied in a novel concurrency library and verification toolkit, which will be used to construct benchmarks and applications. The boarder impacts involve incorporating concurrency into education and the potential to benefit society through higher performing, more reliable, and less expensive software.</AbstractNarration>
    <MinAmdLetterDate>06/17/2014</MinAmdLetterDate>
    <MaxAmdLetterDate>06/17/2014</MaxAmdLetterDate>
    <ARRAAmount/>
    <AwardID>1420673</AwardID>
    <Investigator>
      <FirstName>Maurice</FirstName>
      <LastName>Herlihy</LastName>
      <EmailAddress>herlihy@cs.brown.edu</EmailAddress>
      <StartDate>06/17/2014</StartDate>
      <EndDate/>
      <RoleCode>Principal Investigator</RoleCode>
    </Investigator>
    <Institution>
      <Name>Brown University</Name>
      <CityName>Providence</CityName>
      <ZipCode>029121929</ZipCode>
      <PhoneNumber>4018632777</PhoneNumber>
      <StreetAddress>BOX 1929</StreetAddress>
      <CountryName>United States</CountryName>
      <StateName>Rhode Island</StateName>
      <StateCode>RI</StateCode>
    </Institution>
    <ProgramElement>
      <Code>7798</Code>
      <Text>SOFTWARE &amp; HARDWARE FOUNDATION</Text>
    </ProgramElement>
    <ProgramReference>
      <Code>7923</Code>
      <Text>SMALL PROJECT</Text>
    </ProgramReference>
    <ProgramReference>
      <Code>7943</Code>
      <Text>PROGRAMMING LANGUAGES</Text>
    </ProgramReference>
    <ProgramReference>
      <Code>9150</Code>
      <Text>EXP PROG TO STIM COMP RES</Text>
    </ProgramReference>
  </Award>
</rootTag>
