<?xml version="1.0" encoding="UTF-8"?>

<rootTag>
  <Award>
    <AwardTitle>SHF:Small:Collaborative Research: Compositional Verification of Heterogeneous Software Protocol Stacks</AwardTitle>
    <AwardEffectiveDate>07/01/2014</AwardEffectiveDate>
    <AwardExpirationDate>06/30/2017</AwardExpirationDate>
    <AwardAmount>246958</AwardAmount>
    <AwardInstrument>
      <Value>Standard Grant</Value>
    </AwardInstrument>
    <Organization>
      <Code>05010000</Code>
      <Directorate>
        <LongName>Directorate for Computer &amp; Information Science &amp; Engineering</LongName>
      </Directorate>
      <Division>
        <LongName>Division of Computer and Communication Foundations</LongName>
      </Division>
    </Organization>
    <ProgramOfficer>
      <SignBlockName>Nina Amla</SignBlockName>
    </ProgramOfficer>
    <AbstractNarration>Developing a software protocol stack is a complex task with many parties and products &lt;br/&gt;involved over multiple years. There are many issues that have to be resolved in the &lt;br/&gt;process, and it is incredibly hard to get all of them correct for all platforms and &lt;br/&gt;all possible states of a system. Hence, there are numerous examples of serious errors&lt;br/&gt;that ended up in production, where the cost of fixing them is high. Software protocol &lt;br/&gt;stacks are widely used in many domains, and rigorous methods to improve their &lt;br/&gt;reliability would have a very broad impact. &lt;br/&gt;&lt;br/&gt;The project develops a more rigorous approach to developing and maintaining such complex software&lt;br/&gt; protocol stacks.In particular, formal methods are used to find errors early through rigorous &lt;br/&gt;verification and testing, as well as to assist the analysis in locating reported errors. The approach&lt;br/&gt; is based on automatically learning abstract and succinct protocol models at different layers of the&lt;br/&gt; target software stack. Compositional reasoning is then applied to find errors effectively and &lt;br/&gt;precisely. The generated models are leveraged to help with error localization and diagnosis. The &lt;br/&gt;usability of the approach is assessed through a real-life case study on the Android Bluetooth&lt;br/&gt; software stack.</AbstractNarration>
    <MinAmdLetterDate>06/18/2014</MinAmdLetterDate>
    <MaxAmdLetterDate>07/31/2014</MaxAmdLetterDate>
    <ARRAAmount/>
    <AwardID>1422705</AwardID>
    <Investigator>
      <FirstName>Falk</FirstName>
      <LastName>Howar</LastName>
      <EmailAddress>falk.howar@sv.cmu.edu</EmailAddress>
      <StartDate>06/18/2014</StartDate>
      <EndDate>07/31/2014</EndDate>
      <RoleCode>Former Principal Investigator</RoleCode>
    </Investigator>
    <Investigator>
      <FirstName>Temesghen</FirstName>
      <LastName>Kahsai Azene</LastName>
      <EmailAddress>teme.khasai@sv.cmu.edu</EmailAddress>
      <StartDate>07/31/2014</StartDate>
      <EndDate/>
      <RoleCode>Principal Investigator</RoleCode>
    </Investigator>
    <Investigator>
      <FirstName>Temesghen</FirstName>
      <LastName>Kahsai Azene</LastName>
      <EmailAddress>teme.khasai@sv.cmu.edu</EmailAddress>
      <StartDate>06/18/2014</StartDate>
      <EndDate>07/31/2014</EndDate>
      <RoleCode>Former Co-Principal Investigator</RoleCode>
    </Investigator>
    <Institution>
      <Name>Carnegie-Mellon University</Name>
      <CityName>PITTSBURGH</CityName>
      <ZipCode>152133815</ZipCode>
      <PhoneNumber>4122689527</PhoneNumber>
      <StreetAddress>5000 Forbes Avenue</StreetAddress>
      <CountryName>United States</CountryName>
      <StateName>Pennsylvania</StateName>
      <StateCode>PA</StateCode>
    </Institution>
    <ProgramElement>
      <Code>7798</Code>
      <Text>SOFTWARE &amp; HARDWARE FOUNDATION</Text>
    </ProgramElement>
    <ProgramReference>
      <Code>7923</Code>
      <Text>SMALL PROJECT</Text>
    </ProgramReference>
    <ProgramReference>
      <Code>8206</Code>
      <Text>Formal Methods and Verification</Text>
    </ProgramReference>
  </Award>
</rootTag>
