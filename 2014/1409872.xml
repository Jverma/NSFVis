<?xml version="1.0" encoding="UTF-8"?>

<rootTag>
  <Award>
    <AwardTitle>SHF: Medium: Automated Graphical User Interface Testing with Learning</AwardTitle>
    <AwardEffectiveDate>08/01/2014</AwardEffectiveDate>
    <AwardExpirationDate>07/31/2018</AwardExpirationDate>
    <AwardAmount>850000</AwardAmount>
    <AwardInstrument>
      <Value>Standard Grant</Value>
    </AwardInstrument>
    <Organization>
      <Code>05010000</Code>
      <Directorate>
        <LongName>Directorate for Computer &amp; Information Science &amp; Engineering</LongName>
      </Directorate>
      <Division>
        <LongName>Division of Computer and Communication Foundations</LongName>
      </Division>
    </Organization>
    <ProgramOfficer>
      <SignBlockName>Sol J. Greenspan</SignBlockName>
    </ProgramOfficer>
    <AbstractNarration>Smartphones and tablets with rich graphical user interfaces (GUIs) are&lt;br/&gt;becoming increasingly popular. Hundreds of thousands of specialized&lt;br/&gt;applications, called apps, are already available for these mobile&lt;br/&gt;platforms, and the number of newly released apps continues to&lt;br/&gt;increase. The complexity of these apps lies often in the user&lt;br/&gt;interface, with data processing either minor, or delegated to a&lt;br/&gt;backend component. A similar situation exists in applications using&lt;br/&gt;the software-as-a-service architecture, where the client-side&lt;br/&gt;component consists mostly of user interface code. Testing such&lt;br/&gt;applications predominantly involves GUI testing. Existing automatic&lt;br/&gt;techniques for testing these interfaces either require a priori models&lt;br/&gt;of the interface and are thus hard to use, or operate blindly by&lt;br/&gt;sending random user events to the application and are typically unable&lt;br/&gt;to test the application in satisfactory depth.&lt;br/&gt;&lt;br/&gt;This project investigates automatic GUI testing techniques that&lt;br/&gt;systematically explore the state space of an application without&lt;br/&gt;requiring an a priori defined model. One insight behind this project&lt;br/&gt;is that the automatic construction of a model of the user interface&lt;br/&gt;and the testing of the interface are tasks that can cooperate in a&lt;br/&gt;mutually beneficial way. Furthermore, a guiding principle throughout&lt;br/&gt;this research is to design algorithms that operate with abstractions&lt;br/&gt;and heuristics that are simple enough to be understood by humans who&lt;br/&gt;do not necessarily understand the internals of the tested app. Such&lt;br/&gt;algorithms are easier to comprehend and to incorporate into a&lt;br/&gt;wholistic test process that includes automated techniques, such as the&lt;br/&gt;ones developed in this project, and manual testing and guidance. The&lt;br/&gt;techniques developed in this project benefit directly programmers for&lt;br/&gt;these apps, and indirectly the numerous users of mobile and web&lt;br/&gt;applications.</AbstractNarration>
    <MinAmdLetterDate>07/29/2014</MinAmdLetterDate>
    <MaxAmdLetterDate>07/29/2014</MaxAmdLetterDate>
    <ARRAAmount/>
    <AwardID>1409872</AwardID>
    <Investigator>
      <FirstName>Koushik</FirstName>
      <LastName>Sen</LastName>
      <EmailAddress>ksen@eecs.berkeley.edu</EmailAddress>
      <StartDate>07/29/2014</StartDate>
      <EndDate/>
      <RoleCode>Principal Investigator</RoleCode>
    </Investigator>
    <Investigator>
      <FirstName>George</FirstName>
      <LastName>Necula</LastName>
      <EmailAddress>necula@cs.berkeley.edu</EmailAddress>
      <StartDate>07/29/2014</StartDate>
      <EndDate/>
      <RoleCode>Co-Principal Investigator</RoleCode>
    </Investigator>
    <Institution>
      <Name>University of California-Berkeley</Name>
      <CityName>BERKELEY</CityName>
      <ZipCode>947045940</ZipCode>
      <PhoneNumber>5106428109</PhoneNumber>
      <StreetAddress>Sponsored Projects Office</StreetAddress>
      <CountryName>United States</CountryName>
      <StateName>California</StateName>
      <StateCode>CA</StateCode>
    </Institution>
    <ProgramElement>
      <Code>7798</Code>
      <Text>SOFTWARE &amp; HARDWARE FOUNDATION</Text>
    </ProgramElement>
    <ProgramReference>
      <Code>7924</Code>
      <Text>MEDIUM PROJECT</Text>
    </ProgramReference>
    <ProgramReference>
      <Code>7944</Code>
      <Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
    </ProgramReference>
  </Award>
</rootTag>
