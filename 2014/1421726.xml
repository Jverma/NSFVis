<?xml version="1.0" encoding="UTF-8"?>

<rootTag>
  <Award>
    <AwardTitle>CSR: SMALL: Design Validation Methods for Reliable and Efficient Floating-Point</AwardTitle>
    <AwardEffectiveDate>07/01/2014</AwardEffectiveDate>
    <AwardExpirationDate>06/30/2016</AwardExpirationDate>
    <AwardAmount>398341</AwardAmount>
    <AwardInstrument>
      <Value>Standard Grant</Value>
    </AwardInstrument>
    <Organization>
      <Code>05010000</Code>
      <Directorate>
        <LongName>Directorate for Computer &amp; Information Science &amp; Engineering</LongName>
      </Directorate>
      <Division>
        <LongName>Division of Computer and Communication Foundations</LongName>
      </Division>
    </Organization>
    <ProgramOfficer>
      <SignBlockName>Nina Amla</SignBlockName>
    </ProgramOfficer>
    <AbstractNarration>Floating-point arithmetic enables computers to smoothly and&lt;br/&gt;efficiently handle widely varying magnitudes such as the diameter of&lt;br/&gt;an atom or that of a star, and fit these measures within computer&lt;br/&gt;words that come in standard widths. Unfortunately,&lt;br/&gt;when calculations are performed on floating numbers, round-off errors&lt;br/&gt;are introduced, often causing real-world disasters, such as errant&lt;br/&gt;missile launches. While employing large computer word widths can&lt;br/&gt;minimize these errors, it also slows down computations, increases&lt;br/&gt;their memory, and energy needs. This project could have a broad impact&lt;br/&gt;by providing much needed debug support for scientific programmers to &lt;br/&gt;develop more reliable floating point programs.&lt;br/&gt;&lt;br/&gt;This project develops novel ways to estimate round-off errors, thus&lt;br/&gt;helping programmers arrive at efficient floating-point computer codes.&lt;br/&gt;Special emphasis is placed on handling tricky cases such as squaring&lt;br/&gt;numbers and taking their trigonometric values where prior research had&lt;br/&gt;not sufficiently advanced. By developing powerful and automated tools&lt;br/&gt;for precision estimation, it allows programmers to tune their codes&lt;br/&gt;and pick word widths parsimoniously while not losing accuracy. &lt;br/&gt;The investigators use these tools to develop pedagogical material and best&lt;br/&gt;practices based on hands-on experience that helps inform students who&lt;br/&gt;typically are not taught the pitfalls of floating-point arithmetic.</AbstractNarration>
    <MinAmdLetterDate>07/02/2014</MinAmdLetterDate>
    <MaxAmdLetterDate>07/02/2014</MaxAmdLetterDate>
    <ARRAAmount/>
    <AwardID>1421726</AwardID>
    <Investigator>
      <FirstName>Ganesh</FirstName>
      <LastName>Gopalakrishnan</LastName>
      <EmailAddress>ganesh@cs.utah.edu</EmailAddress>
      <StartDate>07/02/2014</StartDate>
      <EndDate/>
      <RoleCode>Principal Investigator</RoleCode>
    </Investigator>
    <Institution>
      <Name>University of Utah</Name>
      <CityName>SALT LAKE CITY</CityName>
      <ZipCode>841128930</ZipCode>
      <PhoneNumber>8015816903</PhoneNumber>
      <StreetAddress>75 S 2000 E</StreetAddress>
      <CountryName>United States</CountryName>
      <StateName>Utah</StateName>
      <StateCode>UT</StateCode>
    </Institution>
    <ProgramElement>
      <Code>6892</Code>
      <Text>CI REUSE</Text>
    </ProgramElement>
    <ProgramElement>
      <Code>7798</Code>
      <Text>SOFTWARE &amp; HARDWARE FOUNDATION</Text>
    </ProgramElement>
    <ProgramReference>
      <Code>7433</Code>
      <Text>CyberInfra Frmwrk 21st (CIF21)</Text>
    </ProgramReference>
    <ProgramReference>
      <Code>7923</Code>
      <Text>SMALL PROJECT</Text>
    </ProgramReference>
    <ProgramReference>
      <Code>8206</Code>
      <Text>Formal Methods and Verification</Text>
    </ProgramReference>
    <ProgramReference>
      <Code>9150</Code>
      <Text>EXP PROG TO STIM COMP RES</Text>
    </ProgramReference>
  </Award>
</rootTag>
