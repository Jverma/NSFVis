<?xml version="1.0" encoding="UTF-8"?>

<rootTag>
  <Award>
    <AwardTitle>AF: Small: Challenges in Hardness of Approximation</AwardTitle>
    <AwardEffectiveDate>09/01/2014</AwardEffectiveDate>
    <AwardExpirationDate>08/31/2017</AwardExpirationDate>
    <AwardAmount>495850</AwardAmount>
    <AwardInstrument>
      <Value>Standard Grant</Value>
    </AwardInstrument>
    <Organization>
      <Code>05010000</Code>
      <Directorate>
        <LongName>Directorate for Computer &amp; Information Science &amp; Engineering</LongName>
      </Directorate>
      <Division>
        <LongName>Division of Computer and Communication Foundations</LongName>
      </Division>
    </Organization>
    <ProgramOfficer>
      <SignBlockName>Dmitry Maslov</SignBlockName>
    </ProgramOfficer>
    <AbstractNarration>A major focus in theoretical computer science is to determine the ``work" required to solve specific computational problems, efficiency being the usual goal. The work needed to solve a problem, or ``running time'', is often expressed in terms of a number n related to the problem size. A problem is ``easy'' if it is solvable by a ``fast'' algorithm (i.e. whose running time is a polynomial in n). Fast algorithms lie at the heart of much everyday computation, such as Web search engines. In contrast, for certain problems the running time is, unavoidably, an exponential function of n; hence even medium-size instances are unsolvable in practice. For other problems, including those in the class called ``NP", the exact relationship between running time and size remains unknown. Understanding and mapping the boundary between feasible and infeasible problems is the domain of computational complexity.&lt;br/&gt;&lt;br/&gt;Problems in the class ``P'' can be solved in polynomial time; problems in ``NP'', for which a candidate solution can be checked in polynomial time, cannot be solved in polynomial time today and are therefore infeasible. One way to mitigate this infeasibility is to obtain a good but approximate solution. Since the quality of an approximation may vary widely, an obvious question is how well a computationally feasible algorithm can approximate the exact solution. A significant issue is knowing whether the algorithm achieves the best possible performance; if not, a better algorithm should be sought.&lt;br/&gt;&lt;br/&gt;PI's proposed research involves determining the best approximation ratio that is computationally feasible (which amounts to proving that any better ratio is not feasible). It turns out that these ratios can be classified precisely and this research has several connections to mathematics, especially Fourier analysis and geometry. The last two decades have seen a huge progress on these questions and the current proposal is aimed at identifying and working on several challenges that are still wide open. &lt;br/&gt;&lt;br/&gt;The research goals of the proposal will be integrated with teaching, mentoring and dissemination activities. The research will involve participation of graduate students and post-doctoral fellows. The PI plans to develop research courses at graduate level to introduce budding researchers to the area. The dissemination activities will involve writing expository articles and an introductory book and organizing workshops. The PI will welcome any opportunities to guide under-graduate (and high-school) students who might be interested in having research exposure.</AbstractNarration>
    <MinAmdLetterDate>06/06/2014</MinAmdLetterDate>
    <MaxAmdLetterDate>06/06/2014</MaxAmdLetterDate>
    <ARRAAmount/>
    <AwardID>1422159</AwardID>
    <Investigator>
      <FirstName>Subhash</FirstName>
      <LastName>Khot</LastName>
      <EmailAddress>khot@cs.nyu.edu</EmailAddress>
      <StartDate>06/06/2014</StartDate>
      <EndDate/>
      <RoleCode>Principal Investigator</RoleCode>
    </Investigator>
    <Institution>
      <Name>New York University</Name>
      <CityName>NEW YORK</CityName>
      <ZipCode>100121019</ZipCode>
      <PhoneNumber>2129982121</PhoneNumber>
      <StreetAddress>70 WASHINGTON SQUARE S</StreetAddress>
      <CountryName>United States</CountryName>
      <StateName>New York</StateName>
      <StateCode>NY</StateCode>
    </Institution>
    <ProgramElement>
      <Code>7796</Code>
      <Text>ALGORITHMIC FOUNDATIONS</Text>
    </ProgramElement>
    <ProgramReference>
      <Code>7923</Code>
      <Text>SMALL PROJECT</Text>
    </ProgramReference>
    <ProgramReference>
      <Code>7927</Code>
      <Text>COMPLEXITY &amp; CRYPTOGRAPHY</Text>
    </ProgramReference>
  </Award>
</rootTag>
