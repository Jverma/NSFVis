<?xml version="1.0" encoding="UTF-8"?>

<rootTag>
  <Award>
    <AwardTitle>SHF: Small: Mainstream Transactional Memory</AwardTitle>
    <AwardEffectiveDate>09/01/2014</AwardEffectiveDate>
    <AwardExpirationDate>08/31/2017</AwardExpirationDate>
    <AwardAmount>499415</AwardAmount>
    <AwardInstrument>
      <Value>Standard Grant</Value>
    </AwardInstrument>
    <Organization>
      <Code>05010000</Code>
      <Directorate>
        <LongName>Directorate for Computer &amp; Information Science &amp; Engineering</LongName>
      </Directorate>
      <Division>
        <LongName>Division of Computer and Communication Foundations</LongName>
      </Division>
    </Organization>
    <ProgramOfficer>
      <SignBlockName>Anindya Banerjee</SignBlockName>
    </ProgramOfficer>
    <AbstractNarration>Title: SHF: Small: Mainstream Transactional Memory&lt;br/&gt;&lt;br/&gt;Transactional Memory (TM) is the union of two transformative ideas: first, that parallel programming will be easier if programmers can simply specify which operations in their code should be atomic, without specifying how to make them atomic; second, that this simplicity can be supported -- and performance often improved -- by a speculative implementation that executes atomic blocks in parallel, and backs out and retries when -- and only when -- those blocks conflict with one another. After many years of research, TM is now entering widespread use. Hardware support is commercially available from both IBM and Intel; software support is standard in Haskell and under consideration in several other programming languages -- notably C++. The sponsored research extends the state of the art in transactional memory by focusing on (1) software acceleration of fast hardware transactions and (2) hardware acceleration of rich software transactions.&lt;br/&gt;&lt;br/&gt;The intellectual merits in focus area 1 comprise compiler-based techniques to increase speculation success rates, by safely and automatically moving commonly conflicting operations out of transactions, and by "pipelining" execution to serialize the remaining causes of conflict. The intellectual merits in focus area 2 comprise enhancements to the STM run-time system for the Haskell programming language, where hardware support can be used to accelerate transactions whose semantics are too complex to implement directly with commercial hardware. The broader impacts begin with easier construction of correct, efficient parallel code that will allow programmers of all skill levels to write that code more easily. Moreover, the work will impact computer science and allied fields by smoothing the transition to ubiquitous multithreading, thereby extending performance improvements through the next generation of computing. In summary, the work will lead to progress in almost any domain that is driven by parallel computing, across academia and industry.</AbstractNarration>
    <MinAmdLetterDate>07/02/2014</MinAmdLetterDate>
    <MaxAmdLetterDate>07/02/2014</MaxAmdLetterDate>
    <ARRAAmount/>
    <AwardID>1422649</AwardID>
    <Investigator>
      <FirstName>Michael</FirstName>
      <LastName>Scott</LastName>
      <EmailAddress>scott@cs.rochester.edu</EmailAddress>
      <StartDate>07/02/2014</StartDate>
      <EndDate/>
      <RoleCode>Principal Investigator</RoleCode>
    </Investigator>
    <Institution>
      <Name>University of Rochester</Name>
      <CityName>ROCHESTER</CityName>
      <ZipCode>146270140</ZipCode>
      <PhoneNumber>5852754031</PhoneNumber>
      <StreetAddress>518 HYLAN, RIVER CAMPUSBOX 27014</StreetAddress>
      <CountryName>United States</CountryName>
      <StateName>New York</StateName>
      <StateCode>NY</StateCode>
    </Institution>
    <ProgramElement>
      <Code>7798</Code>
      <Text>SOFTWARE &amp; HARDWARE FOUNDATION</Text>
    </ProgramElement>
    <ProgramReference>
      <Code>7923</Code>
      <Text>SMALL PROJECT</Text>
    </ProgramReference>
    <ProgramReference>
      <Code>7943</Code>
      <Text>PROGRAMMING LANGUAGES</Text>
    </ProgramReference>
  </Award>
</rootTag>
